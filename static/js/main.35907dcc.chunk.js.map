{"version":3,"sources":["components/Card.js","components/CardList.js","components/SelectBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","sprite","genus","className","alt","src","CardList","possiblePokemon","length","map","pokemon","key","SelectBox","items","i","this","props","colorOptions","push","value","htmlFor","currentColor","onChange","onSelect","createSelectItems","React","Component","ErrorBoundary","state","hasError","error","info","setState","children","App","randButtonIsClicked","colorField","getRandom","ready","getData","buttonIsClicked","somethingIsSelected","event","target","arr","n","result","Array","len","taken","RangeError","x","Math","floor","random","a","fetch","resp","json","data","pokemon_species","url","pokemonURLs","randomPokemon","pokeURLs","getPokeInfo","pokemonList","genera","then","results","onClick","type","color","height","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.35907dcc.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ({ name, id, sprite, genus }) => {\n    return (\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 w-20 h-100\">\n            <img alt={name} src={sprite}/>\n            <div>\n                <h2>{id}: <span className=\"firstLetterCap\">{name}</span></h2>\n                <h3>{genus}</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ possiblePokemon }) => {\n    if (typeof possiblePokemon !== 'undefined') {\n        if (possiblePokemon.length !== 'undefined') {\n            possiblePokemon = [possiblePokemon]\n        } \n        possiblePokemon = possiblePokemon[0];\n        // console.log('CardList', possiblePokemon);\n        return (\n            <div>\n                {\n                possiblePokemon.map((pokemon) => {\n                    return (\n                        <Card \n                        key={pokemon.id}\n                        name={pokemon.name}\n                        id={pokemon.id}\n                        sprite={pokemon.sprite}\n                        genus={pokemon.genus}\n                        />\n                    );\n                })\n                }\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <h2>Waiting for Input...</h2>\n            </div>\n        )\n    }\n}\n\nexport default CardList;","import React from 'react';\n\nclass SelectBox extends React.Component {\n    createSelectItems() {\n        let items = [];         \n        for (let i = 0; i < this.props.colorOptions.length; i++) {             \n             items.push(<option key={i} value={this.props.colorOptions[i]}>{this.props.colorOptions[i]}</option>);   \n             //here I will be creating my options dynamically based on\n             //what props are currently passed to the parent component\n        }\n        return items;\n      }  \n    render() {\n        return (\n        <div>\n            <label htmlFor=\"colors\">Choose a color: </label>\n            <select name=\"colors\" id=\"colors\" className=\"firstLetterCap\" value={this.props.currentColor} onChange={this.props.onSelect}>\n                {this.createSelectItems()}\n            </select>\n        </div>\n        );\n    }\n}\n\nexport default SelectBox;","import React from 'react';\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <div>\n                    <h1>Oops. Something went wrong :(</h1>\n                    <h2>Try reloading. If the problem persists, somehow contact Alan lol</h2>\n                </div>\n            )\n        } else {\n            return (\n                this.props.children\n            )\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SelectBox from '../components/SelectBox';\nimport Loader from 'react-loader-spinner';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      colorField: 'black',\n      colorOptions: '',\n      pokemon: [{\n        name: \"Pikachu\",\n        id: 25,\n        sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png',\n        genus: 'Mouse Pokemon'\n      }],\n      pokeURLs: [],\n      ready: true\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon-color/')\n      .then(resp=>resp.json())\n      .then(data=>{\n        this.setState({ colorOptions: data.results.map(a => a.name) });\n      })\n    }\n\n  randButtonIsClicked = () => {\n    this.setState({ colorField: this.getRandom(this.state.colorOptions, 1), ready: false }, this.getData);\n  }\n\n  buttonIsClicked = () => {\n    this.setState({ ready: false }, this.getData);\n  }\n\n  somethingIsSelected = (event) => {\n    this.setState({ colorField: event.target.value, ready: false }, this.getData);\n  }\n\n  getRandom = (arr, n) => {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n  }\n  getData = async () => {\n    // console.log('getData', this.state.colorField);\n    const resp = await fetch(`https://pokeapi.co/api/v2/pokemon-color/${this.state.colorField}`);\n    const data = await resp.json();\n    let pokemonURLs = await data.pokemon_species.map(a => a.url);\n    let randomPokemon = this.getRandom(pokemonURLs,10);\n    // console.log('getData', randomPokemon)\n    this.setState({ pokeURLs: randomPokemon }, this.getPokeInfo);\n  }\n\n  getPokeInfo = async () => {\n    let pokemonList = [];\n    let pokemonURLs = this.state.pokeURLs;\n    try {\n      for (let i=0; i<pokemonURLs.length; i++) {\n        let resp = await fetch(`${pokemonURLs[i]}`);\n        let { name, id, genera } = await resp.json();\n        if (genera.length !== 0) {\n          genera = genera[7].genus\n        } else {\n          genera = '[No Data]'\n        }\n        let sprite = '';\n        if (id > 807) {\n          sprite = 'https://vignette.wikia.nocookie.net/pokemon-glitch/images/8/8e/Spr_3r_000.png/revision/latest/top-crop/width/100/height/100?cb=20130324000249'\n        } else {\n          sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n        }\n        pokemonList.push({\n          name: name,\n          id: id,\n          sprite: sprite,\n          genus: genera\n        })\n        // console.log('getPokeInfo', pokemonList);\n      }\n      this.setState({ pokemon: pokemonList, ready: true });\n    }\n    catch (e) {\n      // console.log(e.message);\n    }\n  }\n\n  render() {\n    // console.log('render', this.state.pokemon);\n    if (this.state.ready === true) {\n    return (\n      <div>\n      <ErrorBoundary>\n        <h1>There sure are some colorful Pokemon out there!</h1>\n        <h2>Use this page to generate 10 random Pokemon of a specified color.<br></br>Enjoy!</h2>\n        <SelectBox colorOptions={this.state.colorOptions} currentColor={this.state.colorField} onSelect={this.somethingIsSelected}/>\n        <h3 className='tc'>Currently Showing: \n          <span className=\"firstLetterCap\">{(this.state.pokemon.length === 1) ? ' Pikachu!' : ` ${this.state.colorField} Pokemon`}</span>\n          <button className=\"ma3\" onClick={(this.state.pokemon.length === 1) ? this.randButtonIsClicked : this.buttonIsClicked}>\n            {(this.state.pokemon.length === 1) ? 'Choose a color for me!' : 'Show me more!'}\n          </button>\n        </h3>\n        <CardList possiblePokemon={this.state.pokemon}/>\n      </ErrorBoundary>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <h1>There sure are some colorful Pokemon out there!</h1>\n        <h2>Use this page to generate 10 random Pokemon of a specified color.<br></br>Enjoy!</h2>\n        <h1>Fetching data... (this may take a moment)</h1>\n        <Loader\n         type=\"ThreeDots\"\n         color=\"#5ab48a\"\n         height={100}\n         width={100}/>\n      </div>\n    )\n  }\n} \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <footer><p>This app by Alan :)</p></footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}